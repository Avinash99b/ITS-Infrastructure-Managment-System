openapi: 3.0.0
info:
  title: ITS API
  version: 1.0.0
  description: ITS API Documentation
  contact:
    name: ITS Support
    email: bathulaavi@gmail.com
servers:
  - url: http://localhost:3000
    description: Development Server
  - url: https://its.api.avinash9.tech
    description: Production Server
paths:
  /api/v1/auth/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mobile_no:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successful login
        "401":
          description: Unauthorized
  /api/v1/auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Full name of the user
                email:
                  type: string
                  format: email
                  description: Email address of the user
                mobile_no:
                  type: string
                  description: Mobile number of the user
                password:
                  type: string
                  description: Password for the account
      responses:
        "201":
          description: User registered
        "400":
          description: Invalid request
  /api/v1/auth/forgot-password:
    post:
      summary: Forgot password
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mobile_no:
                  type: string
                  format: mobile_no
                  description: Mobile No of the user
      responses:
        "200":
          description: Password reset link sent
        "400":
          description: Invalid request
  /api/v1/blocks:
    get:
      summary: Get all blocks
      tags:
        - Blocks
      responses:
        "200":
          description: List of blocks
    post:
      summary: Create a new block
      tags:
        - Blocks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        "201":
          description: Block created
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
  /api/v1/blocks/{id}:
    get:
      summary: Get block by ID
      tags:
        - Blocks
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Block details
        "404":
          description: Block not found
    put:
      summary: Update block by ID
      tags:
        - Blocks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: Block updated
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
        "404":
          description: Block not found
    delete:
      summary: Delete block by ID
      tags:
        - Blocks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Block deleted
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
        "404":
          description: Block not found
  /api/v1/faults:
    get:
      summary: List all faults
      tags:
        - Faults
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of faults
  /api/v1/faults/report:
    post:
      summary: Report a fault
      tags:
        - Faults
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                system_disk_serial_no:
                  type: string
                  description: Disk serial number of the system
                fault_name:
                  type: string
                  description: Name of the fault
                description:
                  type: string
                  description: Optional fault description
      responses:
        "201":
          description: Fault reported
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  report:
                    type: object
        "400":
          description: Validation failed
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
  /api/v1/faults/reports:
    get:
      summary: List fault reports (paged)
      tags:
        - Fault Reports
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination (optional)
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Number of items per page (optional)
        - in: query
          name: status
          schema:
            type: string
          description: Filter by fault report status (optional)
        - in: query
          name: system_disk_serial_no
          schema:
            type: string
          description: Filter by system disk serial number (optional)
        - in: query
          name: reported_by
          schema:
            type: string
          description: Filter by reporter user ID (optional)
      responses:
        "200":
          description: List of fault reports
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
        "400":
          description: Invalid query parameters
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
  /api/v1/faults/reports/status:
    patch:
      summary: Update Status of Fault Report
      tags:
        - Fault Reports
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: New status for the user (e.g., pneding,in_progress,resolved)
      responses:
        "200":
          description: Updating Successful
          content:
            application/json:
              schema:
                type: object
                properties: null
        "400":
          description: Invalid query parameters
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
  /api/v1/faults/reports/{reportId}/technicianId:
    post:
      summary: Assign a technician to a fault report
      tags:
        - Fault Reports
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: reportId
          required: true
          schema:
            type: string
          description: ID of the fault report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                technicianId:
                  type: string
                  description: ID of the technician to assign
      responses:
        "200":
          description: Technician assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  assignment:
                    type: object
        "400":
          description: Invalid request or parameters
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
  /api/v1/permissions:
    get:
      summary: Get all permissions
      tags:
        - Permissions
      responses:
        "200":
          description: List of permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PermissionModel"
  /api/v1/rooms:
    get:
      summary: Get all rooms
      tags:
        - Rooms
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination (optional)
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page (optional)
        - in: query
          name: block_id
          schema:
            type: integer
          description: Filter by block ID (optional)
        - in: query
          name: floor
          schema:
            type: integer
          description: Filter by floor (optional)
        - in: query
          name: incharge_id
          schema:
            type: integer
          description: Filter by incharge user ID (optional)
      responses:
        "200":
          description: List of rooms
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
        "400":
          description: Invalid query parameters
    post:
      summary: Create a new room
      tags:
        - Rooms
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                blockId:
                  type: string
      responses:
        "201":
          description: Room created
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
  /api/v1/rooms/{id}:
    get:
      summary: Get room by ID
      tags:
        - Rooms
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Room details
        "404":
          description: Room not found
    patch:
      summary: Update room by ID
      tags:
        - Rooms
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                blockId:
                  type: string
      responses:
        "200":
          description: Room updated
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
        "404":
          description: Room not found
    delete:
      summary: Delete room by ID
      tags:
        - Rooms
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Room deleted
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
        "404":
          description: Room not found
  /api/v1/systems:
    get:
      summary: List all systems
      tags:
        - Systems
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination (optional)
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Number of items per page (optional)
        - in: query
          name: room_id
          schema:
            type: integer
          description: Filter by room ID (optional)
        - in: query
          name: status
          schema:
            type: string
            enum:
              - green
              - orange
              - red
          description: Filter by system status (optional)
        - in: query
          name: type
          schema:
            type: string
            enum:
              - spare
              - using
          description: Filter by system type (optional)
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter systems by disk_serial_no, type, or status
            (optional)
      responses:
        "200":
          description: List of systems
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                  page:
                    type: integer
                  limit:
                    type: integer
                  total:
                    type: integer
        "400":
          description: Invalid query parameters
    post:
      summary: Register a new system
      tags:
        - Systems
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                disk_serial_no:
                  type: string
                name:
                  type: string
      responses:
        "201":
          description: System registered
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
  /api/v1/systems/{disk_serial_no}:
    get:
      summary: Get system by disk serial number
      tags:
        - Systems
      parameters:
        - in: path
          name: disk_serial_no
          required: true
          schema:
            type: string
      responses:
        "200":
          description: System details
        "404":
          description: System not found
    patch:
      summary: Update system by disk serial number
      tags:
        - Systems
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: disk_serial_no
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          description: System updated
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
        "404":
          description: System not found
  /api/v1/systems/{disk_serial_no}/speed:
    patch:
      summary: Update system speed
      tags:
        - Systems
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: disk_serial_no
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                speed:
                  type: number
      responses:
        "200":
          description: System speed updated
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
        "404":
          description: System not found
  /api/v1/users:
    get:
      summary: Get all users with advanced filters, search, sorting, and pagination
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Number of users per page
        - in: query
          name: range
          schema:
            type: string
            example: 2025-07-01,2025-08-01
          description: Filter users created between two dates (YYYY-MM-DD,YYYY-MM-DD)
        - in: query
          name: search
          schema:
            type: string
          description: Search users by name, email, or mobile number
        - in: query
          name: sort
          schema:
            type: string
            example: created_at
          description: Field to sort users by
        - in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          description: Sort order (ascending or descending)
      responses:
        "200":
          description: Paginated list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    $ref: "#/components/schemas/UserModel"
                  page:
                    type: integer
                  limit:
                    type: integer
                  total:
                    type: integer
        "400":
          description: Invalid query parameters
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
        "500":
          description: Internal server error
  /api/v1/users/me:
    get:
      summary: Get current user
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current user details
        "401":
          description: Unauthorized (No token or invalid token)
    patch:
      summary: Update current user's name and email
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: john@example.com
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/UserModel"
        "400":
          description: Invalid input or no fields to update
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  /api/v1/users/me/permissions:
    get:
      summary: Get current user's permissions
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of permissions for current user
        "401":
          description: Unauthorized (No token or invalid token)
  /api/v1/users/permissions:
    patch:
      summary: Update user permissions - Need to send array of full permissions to keep
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: number
                permissions:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Permissions updated
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
  /api/v1/users/{id}/permissions:
    get:
      summary: Get permissions by user ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of permissions for user
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
  /api/v1/users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseModel"
        "400":
          description: Invalid user ID
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
        "404":
          description: User not found
        "500":
          description: Internal server error
  /api/v1/users/{id}/status:
    patch:
      summary: Update user status
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: New status for the user (e.g., active, inactive, suspended)
      responses:
        "200":
          description: User status updated
        "400":
          description: Invalid request
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
  /api/v1/users/{id}/profile:
    get:
      summary: Get public profile information for a user
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        "200":
          description: Public profile information
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  image_url:
                    type: string
                    nullable: true
        "404":
          description: User not found
        "500":
          description: Internal server error
  /api/v1/users/me/profile-image:
    patch:
      summary: Update current user's profile image
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Profile image updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  profileImageUrl:
                    type: string
        "400":
          description: No file uploaded or invalid file type
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  /api/v1/users/update-password:
    post:
      summary: Update current user's password
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  description: Current password of the user
                newPassword:
                  type: string
                  description: New password for the user
      responses:
        "200":
          description: Password updated successfully
        "400":
          description: Invalid input or password not strong enough
        "401":
          description: Unauthorized (No token or invalid token)
        "403":
          description: Forbidden (Missing permission)
        "500":
          description: Internal server error
components:
  schemas:
    PermissionModel:
      type: object
      properties:
        name:
          type: string
          description: The name of the permission (e.g., 'create:user').
          example: view_faults
        description:
          type: string
          description: A friendly description of what the permission allows.
          example: Allows the user view the faults.
      required:
        - id
        - name
    UserStatus:
      type: string
      enum:
        - active
        - inactive
        - suspended
    UserModel:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        image_url:
          type: string
        mobile_no:
          type: string
        password_hash:
          type: string
        permissions:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/UserStatus"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - email
        - mobile_no
        - password_hash
        - status
    UserResponseModel:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        image_url:
          type: string
        email:
          type: string
        mobile_no:
          type: string
        permissions:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/UserStatus"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - email
        - mobile_no
        - status
tags:
  - name: Auth
    description: Authentication and user management
